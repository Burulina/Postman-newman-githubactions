{
	"info": {
		"_postman_id": "5ce4909c-eb62-4037-9065-433215b8039a",
		"name": "storeLast",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20314312"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"const reqJSON = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Product is created with correct properties\", function () {\r",
									"    pm.expect(respJSON.name).to.eql(reqJSON.name);\r",
									"    pm.expect(respJSON.price).to.eql(reqJSON.price);\r",
									"    pm.expect(respJSON.sku).to.eql(reqJSON.sku);\r",
									"    pm.expect(respJSON.description).to.eql(reqJSON.description);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"id\", respJSON.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{newName}}\",\r\n    \"price\": {{newPrice}},\r\n    \"sku\": {{newSku}},\r\n    \"description\": \"{{newDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Correct ID is returned\", function () {\r",
									"    pm.expect(respJSON.id).to.eql(Number(pm.collectionVariables.get(\"id\")));\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"name\",\r",
									"    \"price\",\r",
									"    \"sku\",\r",
									"    \"description\",\r",
									"    \"id\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"const reqJSON = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Product is updated with correct propeties\", function () {\r",
									"    pm.expect(respJSON.name).to.eql(reqJSON.name);\r",
									"    pm.expect(respJSON.price).to.eql(reqJSON.price);\r",
									"    pm.expect(respJSON.sku).to.eql(reqJSON.sku);\r",
									"    pm.expect(respJSON.description).to.eql(reqJSON.description);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json; charset=utf-8\", function () {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{id}},\r\n    \"name\": \"{{updateName}}\",\r\n    \"price\": {{updatePrice}},\r\n    \"sku\": {{updateSku}},\r\n    \"description\": \"{{updateDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const respJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Product doesn't contain previous values from 'Create product' step\", function () {\r",
									"    pm.expect(respJSON.name).is.not.eql(pm.collectionVariables.get(\"newName\"));\r",
									"    pm.expect(respJSON.price).is.not.eql(Number(pm.collectionVariables.get(\"newPrice\")));\r",
									"    pm.expect(respJSON.sku).is.not.eql(Number(pm.collectionVariables.get(\"newSku\")));\r",
									"    pm.expect(respJSON.description).is.not.eql(pm.collectionVariables.get(\"newDescription\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Check data types of product\", function () {\r",
									"    pm.expect(respJSON.name).to.be.a(\"string\");\r",
									"    pm.expect(respJSON.price).to.be.a(\"number\");\r",
									"    pm.expect(respJSON.sku).to.be.a(\"number\");\r",
									"    pm.expect(respJSON.description).to.be.a(\"string\");\r",
									"    pm.expect(respJSON.sku).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Confirm product contains all expected properties\", function () {\r",
									"    pm.expect(respJSON).to.have.property(\"name\");\r",
									"    pm.expect(respJSON).to.have.property(\"price\");\r",
									"    pm.expect(respJSON).to.have.property(\"sku\");\r",
									"    pm.expect(respJSON).to.have.property(\"description\");\r",
									"    pm.expect(respJSON).to.have.property(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID after delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Lenght header is present\", () => {\r",
									"  pm.response.to.have.header(\"Content-Length\");\r",
									"});\r",
									"\r",
									"const respJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is empty\", function () {\r",
									"    pm.expect(respJson).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has json format\", function () {\r",
									"    pm.response.to.be.json; \r",
									"});\r",
									"\r",
									"pm.test(\"Ensure response only contains 3 products)\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(3);\r",
									"});\r",
									"\r",
									"const schema =\r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"price\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"sku\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"price\",\r",
									"        \"sku\",\r",
									"        \"description\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"price\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"sku\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"price\",\r",
									"        \"sku\",\r",
									"        \"description\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"price\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"sku\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"price\",\r",
									"        \"sku\",\r",
									"        \"description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"let unsortedProducts = JSON.stringify(response);\r",
									"pm.variables.set(\"unsortedProducts\", unsortedProducts);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products Sorting by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let unsorted = JSON.parse(pm.variables.get(\"unsortedProducts\"));\r",
									"const response = pm.response.json();\r",
									"var _ = require('lodash')\r",
									"pm.test('Response is ordered by name', function() {\r",
									"var expectedSortedOrder = _.orderBy(unsorted, ['name'],['asc']);\r",
									"pm.expect(response).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products Sorting by price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let unsorted = JSON.parse(pm.variables.get(\"unsortedProducts\"));\r",
									"const response = pm.response.json();\r",
									"var _ = require('lodash')\r",
									"pm.test('Response is ordered by price', function() {\r",
									"var expectedSortedOrder = _.orderBy(unsorted, ['price'],['desc']);\r",
									"pm.expect(response).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=price",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "DESC"
								},
								{
									"key": "sortKey",
									"value": "price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products Pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Check pageSize - only contains 2 products\", function () {\r",
									"    pm.expect(pm.response.json().length).to.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=1&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "newName",
			"value": "orange",
			"type": "string"
		},
		{
			"key": "newPrice",
			"value": "8",
			"type": "string"
		},
		{
			"key": "newSku",
			"value": "123321123",
			"type": "string"
		},
		{
			"key": "newDescription",
			"value": "wouh",
			"type": "string"
		},
		{
			"key": "updateName",
			"value": "banana",
			"type": "string"
		},
		{
			"key": "updatePrice",
			"value": "155",
			"type": "string"
		},
		{
			"key": "updateSku",
			"value": "321321321",
			"type": "string"
		},
		{
			"key": "updateDescription",
			"value": "changed description",
			"type": "string"
		},
		{
			"key": "id",
			"value": "null",
			"type": "string"
		},
		{
			"key": "unsortedProducts",
			"value": "",
			"type": "string"
		}
	]
}